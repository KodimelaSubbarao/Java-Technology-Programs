/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-03-21 12:32:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import product.admin.AdminBean;

public final class DeleteProduct_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(1);
    _jspx_imports_classes.add("product.admin.AdminBean");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>AdminLogin</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	header{\r\n");
      out.write("		border: 3px solid cadetblue;\r\n");
      out.write("        height: 50px;\r\n");
      out.write("        background-color: gold;\r\n");
      out.write("	}\r\n");
      out.write("	nav{\r\n");
      out.write("		display: flex;	\r\n");
      out.write("		justify-content: space-around;\r\n");
      out.write("		margin-top: 15px;\r\n");
      out.write("        margin-left: -10px;\r\n");
      out.write("		margin-right: -10px;\r\n");
      out.write("	}\r\n");
      out.write("    nav a{\r\n");
      out.write("        text-decoration: none;\r\n");
      out.write("        font-size: 18px;\r\n");
      out.write("        font-family: arial;\r\n");
      out.write("        color: blue;\r\n");
      out.write("        font-weight: bolder;\r\n");
      out.write("    }\r\n");
      out.write("    a:hover{\r\n");
      out.write("        text-decoration: underline;\r\n");
      out.write("    }\r\n");
      out.write("    .sec{\r\n");
      out.write("     	display: flex;\r\n");
      out.write("     	justify-content: space-between;\r\n");
      out.write("     	margin-top: 20px;\r\n");
      out.write("     	margin-left: 20px;\r\n");
      out.write("     	margin-right: 30px;\r\n");
      out.write("    }\r\n");
      out.write("    .dt{\r\n");
      out.write("    	\r\n");
      out.write("    	font-size: 18px;\r\n");
      out.write("    	font-weight: bolder;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body onload=\"bodyload()\">\r\n");
      out.write("<header>\r\n");
      out.write("	<nav>\r\n");
      out.write("		<span><a href=\"index.html\">Home</a></span>\r\n");
      out.write("		<span><a href=\"AddProduct.html\" target=\"frame\">Add Product</a></span>\r\n");
      out.write("		<span><a href=\"view\"> View All Products </a></span>\r\n");
      out.write("		<span><a href=\"users\">View All Customers</a></span>\r\n");
      out.write("		<span><a href=\"logout\"> Logout </a></span>\r\n");
      out.write("	</nav>\r\n");
      out.write("</header>\r\n");
      out.write("<section class=\"sec\">\r\n");
      out.write("	<div>\r\n");
      out.write("		<span>\r\n");
      out.write("		");

			AdminBean ab=(AdminBean)session.getAttribute("abean");
			out.println("<b>Page belongs to Admin: "+ab.getlName());
			String msg=(String)request.getAttribute("msg");
			out.println("<span style='color:green;'><b>"+msg+"</b></span>");
		
      out.write("\r\n");
      out.write("		</span>\r\n");
      out.write("	</div>	\r\n");
      out.write("	\r\n");
      out.write("    <div class=\"dt\">\r\n");
      out.write("        	<span id=\"date1\"></span><br>\r\n");
      out.write("        	<span id=\"time1\" style=\"padding-left: 10px; padding-top: 5px;\"></span>\r\n");
      out.write("    </div>\r\n");
      out.write("</section>\r\n");
      out.write("<footer>\r\n");
      out.write("	<iframe name=\"frame\" style=\"border: none; padding-left: 400px;\" height=\"500px\" width=\"500px\"></iframe>\r\n");
      out.write("</footer>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    function updateTime() {\r\n");
      out.write("        var date = new Date(); // Create a new Date object to get the current time\r\n");
      out.write("        var hours = date.getHours();\r\n");
      out.write("        var minutes = date.getMinutes();\r\n");
      out.write("        var seconds = date.getSeconds();\r\n");
      out.write("        var ampm = hours >= 12 ? \"PM\" : \"AM\";\r\n");
      out.write("        hours = hours % 12 || 12; // Convert 0 to 12 for 12-hour format\r\n");
      out.write("        minutes = minutes < 10 ? '0' + minutes : minutes;\r\n");
      out.write("        seconds = seconds < 10 ? '0' + seconds : seconds;\r\n");
      out.write("        var time = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\r\n");
      out.write("        document.getElementById(\"time1\").innerHTML = time;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    function dateload() {\r\n");
      out.write("        var currentDate = new Date(); // Rename the variable to currentDate\r\n");
      out.write("        var weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n");
      out.write("        var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\"];\r\n");
      out.write("        var dateString = currentDate.getDate() + \"-\" + months[currentDate.getMonth()] + \"-\" + currentDate.getFullYear();\r\n");
      out.write("        document.getElementById(\"date1\").innerHTML = dateString;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function bodyload() {\r\n");
      out.write("        dateload();\r\n");
      out.write("        updateTime();\r\n");
      out.write("        setInterval(updateTime, 1000);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Call the bodyload function after the DOM is fully loaded\r\n");
      out.write("    document.addEventListener(\"DOMContentLoaded\", function() {\r\n");
      out.write("        bodyload();\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
