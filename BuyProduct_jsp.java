/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-03-18 14:57:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import product.admin.ProductBean;
import product.user.UserBeans;

public final class BuyProduct_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("product.user.UserBeans");
    _jspx_imports_classes.add("product.admin.ProductBean");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Buy</title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	function btnClick()\r\n");
      out.write("	{\r\n");
      out.write("		var price=parseFloat(document.getElementById(\"p\").value);\r\n");
      out.write("		var item=parseInt(document.getElementById(\"items\").value);\r\n");
      out.write("		var t=Math.round(price*item);\r\n");
      out.write("		document.getElementById(\"total\").innerHTML=\"Your Total Bill is : \"+t;\r\n");
      out.write("	}\r\n");
      out.write("	function check(){\r\n");
      out.write("		var item=parseInt(document.getElementById(\"items\").value);\r\n");
      out.write("		var no=parseInt(document.getElementById(\"q\").value);\r\n");
      out.write("		var error=document.getElementById(\"error\");\r\n");
      out.write("		if(item>no)\r\n");
      out.write("			{\r\n");
      out.write("				error.innerHTML=\"Total \"+no+\" Items avilable,<br>Please select below or equal ietms only\";\r\n");
      out.write("			}\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	body{\r\n");
      out.write("		display: flex;\r\n");
      out.write("		justify-content: space-around;\r\n");
      out.write("	}\r\n");
      out.write("	form{\r\n");
      out.write("		margin-top: 100px;\r\n");
      out.write("		margin-left: -250px;\r\n");
      out.write("		border: 2px solid black;\r\n");
      out.write("		padding-left: 30px;\r\n");
      out.write("		width:300px;\r\n");
      out.write("		padding-top: 20px;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div>\r\n");
      out.write("		");

			UserBeans ub = (UserBeans) session.getAttribute("ubean");
			out.println("<br><b>Page belongs to User: " + ub.getlName()+"<b><br>");
			ProductBean pb = (ProductBean) request.getAttribute("pbean");
		
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("		<div>\r\n");
      out.write("		<form>\r\n");
      out.write("				\r\n");
      out.write("				<dl>\r\n");
      out.write("					<dt>Product Code</dt>\r\n");
      out.write("					<dd><input type=\"text\" name=\"code\"  value=");
      out.print(pb.getpCode());
      out.write(" readonly=\"readonly\"></dd>\r\n");
      out.write("					<dt>Product Name</dt>\r\n");
      out.write("					<dd>\r\n");
      out.write("						<input type=\"text\" name=\"name\" value=");
      out.print(pb.getpName());
      out.write(" readonly=\"readonly\">\r\n");
      out.write("					</dd>\r\n");
      out.write("					<dt>Product Price</dt>\r\n");
      out.write("					<dd>\r\n");
      out.write("						<input type=\"text\" name=\"price\" id=\"p\" value=");
      out.print(pb.getpPrice());
      out.write(" readonly=\"readonly\">\r\n");
      out.write("					</dd>\r\n");
      out.write("					<dt>How Many Items You Want..?</dt>\r\n");
      out.write("					<dd>\r\n");
      out.write("						<input type=\"text\" name=\"qty\" id=\"items\" onkeyup=\"check()\" width=\"500px\" pattern=\"\\d{1,}\" placeholder=\"enter number of items\" required=\"required\">\r\n");
      out.write("					</dd>\r\n");
      out.write("					<dd><input type=\"hidden\" id=\"q\" value=");
      out.print(pb.getpQty() );
      out.write("> \r\n");
      out.write("					<dd id=\"error\" style=\"color:red;font-size:15px;\"></dd>\r\n");
      out.write("				</dl>\r\n");
      out.write("				<div>\r\n");
      out.write("					<button type=\"button\" style=\"width:100px;height: 25px; margin-left: 50px; font-size:16px; font-weight: bold;\" onclick=\"btnClick()\">Buy</button>\r\n");
      out.write("					<button type=\"button\" name=\"ulogin\">Back</button>\r\n");
      out.write("				</div>\r\n");
      out.write("				<p id=\"total\" style=\"font-size: 16px; font-weight: bold; color:blue;\"></p>\r\n");
      out.write("			</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
